# Below you'll find an example configuration, showing you and explaining most
# (if not all) possible configurations you might need. If you are unsure about
# any of the explanations, be sure to also check out the documentation on the
# internal types that are configured through this TOML file:
#
#   https://docs.rs/dfw/*/dfw/types/index.html
#
# Each of the sections in this file matches to a struct under the same name,
# and every struct field contains some documentation that might help you out.

[container_to_container]
# The container_to_container table defines if and how containers are allowed to
# communicate amongst each other. The first thing you have to define is the
# default policy that should be applied to C2C communication, e.g. disallow all
# communication by default: (valid values are "accept" and "drop")
default_policy = "drop"

[[container_to_container.rules]]
# To then allow specific communication between containers, you'll have to add a
# rule defining this communication. For example the following configuration
# will allow all communication between the containers `container_a` and
# `container_b`, as long as the containers are able to communicate via the
# Docker network `common_network`.
network = "common_network"
src_container = "container_a"
dst_container = "container_b"
verdict = "accept"
# (If you want to enable communication between two containers that are on
# separate Docker networks, check out the container_dnat section at the end of
# the file.)

[[container_to_container.rules]]
# The `src_container` and `dst_container` fields are both optional, and you are
# allowed to specify both, none, or either one. This enables you to for example
# configure the allowed communication on a complete Docker network, no matter
# the containers involved:
network = "internal_network"
verdict = "accept"

[[container_to_container.rules]]
# Being able to specify only one of `src_container` and `dst_container` can be
# useful in many cases. One example could be a reverse-proxy: you want your
# proxying container to be able to access any other container on the same
# reverse-proxy network, without the other containers being able to access each
# other or the proxying container (except for the responses to requests made by
# the reverse proxy, i.e. related and established traffic will be allowed):
network = "reverseproxy_network"
src_container = "my_reverseproxy"
verdict = "accept"

[[container_to_container.rules]]
# If the simple iptables actions (accept, reject, drop) are not enough for your
# use-case, you can also specify the `matches` field which will add your
# specified string to the iptables command executed. This enables you to for
# example set a specific destination port that should be reachable, rather than
# the container as a whole:
network = "reverseproxy_network"
src_container = "my_reverseproxy"
dst_container = "my_webserver"
matches = "tcp dport 8080"
verdict = "accept"

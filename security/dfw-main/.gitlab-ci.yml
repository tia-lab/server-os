image: rustlang/rust:nightly

variables:
  DOCKER_TLS_CERTDIR: ''
  DOCKER_DRIVER: overlay2
  CARGO_HOME: "$CI_PROJECT_DIR/cargo"
  CROSS_BUILD_IMAGE: "ekidd/rust-musl-builder:stable"
  TESTER_BUILD_IMAGE: "${CI_REGISTRY_IMAGE}/hack/tester:latest"

stages:
- prepare
- preconditions
- build
- test docker
- package

.build and push hack image: &build-and-push-hack-image
  stage: prepare
  image: docker:latest
  tags:
  - privileged
  services:
  - docker:dind
  script:
  - # I hate this eval as much as the next guy, but I didn't come up with
    # another way that wouldn't result in duplication for the
    # `*_BUILD_IMAGE` variables.
    export BUILD_IMAGE=$(eval "echo \"$BUILD_IMAGE\"")
  - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  - 'docker pull "${BUILD_IMAGE}" || :'
  - >
    docker build
    --pull
    --cache-from "${BUILD_IMAGE}"
    -t "${BUILD_IMAGE}"
    "hack/docker/${BUILD_DIR}/"
  - docker push "${BUILD_IMAGE}"

build and push tester image:
  <<: *build-and-push-hack-image
  variables:
    BUILD_IMAGE: "$TESTER_BUILD_IMAGE"
    BUILD_DIR: "tester"

rustfmt:
  stage: preconditions
  needs: []
  image: rust:latest
  script:
  - rustup component add rustfmt
  - cargo fmt --all -- --check

check license headers:
  stage: preconditions
  needs: []
  image: alpine:latest
  before_script:
  - apk add --no-cache bash
  script:
  - hack/check-license-headers.sh

build and test dynamic binary on stable:
  stage: build
  needs: []
  image: rust:latest
  script:
  - cargo build --verbose
  - cargo test -- --nocapture
  - cargo run --bin dfw -- --check-config --config-file examples/minimal/dfw.toml
  - cargo run --bin dfw -- --check-config --config-file examples/full-single-file/dfw.toml
  - cargo run --bin dfw -- --check-config --config-path examples/full-path/
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
    - Cargo.toml
    - Cargo.lock

build dynamic binary on nightly:
  stage: build
  needs: []
  image: rustlang/rust:nightly
  script:
  - cargo build --verbose
  allow_failure: true
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
    - Cargo.toml
    - Cargo.lock

build static binary:
  stage: build
  needs: []
  image: "${CROSS_BUILD_IMAGE}"
  script:
  - cargo build --target x86_64-unknown-linux-musl --release
  - cargo test --target x86_64-unknown-linux-musl --release -- --nocapture
  - cp target/x86_64-unknown-linux-musl/release/dfw dfw-unstripped
  - cp target/x86_64-unknown-linux-musl/release/dfw dfw
  - strip dfw
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
    - Cargo.toml
    - Cargo.lock
    - dfw-unstripped
    - dfw

build test binary for docker tests:
  stage: build
  needs: []
  image: rust:latest
  script:
  - wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
  - chmod +x jq
  - >
    cp $(cargo test \
      --features docker-tests \
      --test dfw \
      --no-run \
      --message-format=json \
      | ./jq -r 'select(.profile.test == true) | .executable') dfw-docker-test
  cache:
    paths:
    - dfw-docker-test
    policy: push

.test-docker-tests: &test-docker-tests
  stage: test docker
  needs:
  - "build and push tester image"
  - "build test binary for docker tests"
  image: "$TESTER_BUILD_IMAGE"
  tags:
  - privileged
  services:
  - "docker:dind"
  only:
  - main
  dependencies: [] # don't download artifacts from previous jobs
  cache:
    paths:
    - dfw-docker-test
    policy: pull
  script:
  - # Shiplift apparently doesn't work with a tcp docker host
    export DOCKER_HOST="${DOCKER_HOST/tcp:/http:}"
  - RUST_TEST_THREADS=1 ./dfw-docker-test --nocapture

# API from 1.12.6 and below is not compatible.
test on docker 1.13.1:
  <<: *test-docker-tests
  services:
  - "docker:1.13.1-dind"
test on docker 17.06.2-ce:
  <<: *test-docker-tests
  services:
  - "docker:17.06.2-ce-dind"
test on docker 17.07.0-ce:
  <<: *test-docker-tests
  services:
  - "docker:17.07.0-ce-dind"
test on docker 17.09.1-ce:
  <<: *test-docker-tests
  services:
  - "docker:17.09.1-ce-dind"
test on docker 17.12.1-ce:
  <<: *test-docker-tests
  services:
  - "docker:17.12.1-ce-dind"
test on docker 18.03.1-ce:
  <<: *test-docker-tests
  services:
  - "docker:18.03.1-ce-dind"
test on docker 18.06.1-ce:
  <<: *test-docker-tests
  services:
  - "docker:18.06.1-ce-dind"
test on docker 18.09.7-ce:
  <<: *test-docker-tests
  services:
  - "docker:18.09.7-dind"
  only:
  - /.*/

package and push image for feature-branch:
  stage: package
  image: docker:latest
  tags:
  - privileged
  services:
  - docker:dind
  only:
  - branches
  except:
  - main
  - /^develop\/.*$/
  script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker build --pull -t "${CI_REGISTRY_IMAGE}/branches:${CI_COMMIT_REF_SLUG}" .
  - docker push "${CI_REGISTRY_IMAGE}/branches:${CI_COMMIT_REF_SLUG}"

package and push image for tags:
  stage: package
  image: docker:latest
  tags:
  - privileged
  services:
  - docker:dind
  only:
  - tags
  script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker build --pull -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" .
  - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

package and push image on main:
  stage: package
  image: docker:latest
  tags:
  - privileged
  services:
  - docker:dind
  only:
  - main
  script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker build --pull -t $CI_REGISTRY_IMAGE .
  - docker push $CI_REGISTRY_IMAGE

# -----------------------------------------------------------------------------

.global_functions: &global_functions |
  if command -v docker; then
      if ! docker info &>/dev/null; then
          if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
              export DOCKER_HOST='tcp://localhost:2375'
          fi
      fi
  fi

before_script:
- *global_functions
